#!/bin/bash

###
# OpenZula server utilities
# --- Backups domains, emails and some system files using "duplicity"
#
# Copyright (c) 2011 Alex Cartwright <alex@openzula.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name(s) of the above
# copyright holders shall not be used in advertising or otherwise
# to promote the sale, use or other dealings in this Software without
# prior written authorization.
###

if ! type duplicity &> /dev/null; then
	echo "One or more of the following commands can not be found: duplicity" >&2
	exit 2
fi

case $2 in
	--all)
		backupCron=true
		backupDomains=true
		backupEmails=true
		backupMysql=true
		;;
	--cron)
		backupCron=true
		;;
	--domains)
		backupDomains=true
		;;
	--emails)
		backupEmails=true
		;;
	--mysql)
		backupMysql=true
		;;
	-h)
		echo "OpenZula server utilities"
		echo "Usage:"
		echo -e "\t$scriptName backup [--all|--cron --domains --emails --mysql]\n"
		echo "Report bugs to <alex@openzula.org>"
		exit 0
		;;
	*)
		echo "Invalid action '$2'. Use '--all', '--cron', '--domains', '--emails' or '--mysql'" >&2
		exit 1
		;;
esac

if [[ -z $cfgBackupDest ]]; then
	echo "No backup destination 'cfgBackupDest' has been set" >&2
	exit 2
fi

##
## Set various environmental variables & duplicity arguments
##
export PASSPHRASE=$cfgBackupPassphrase

# GPG encryption & signing (advised)
if [[ -n $cfgBackupGpgKey ]]; then
	duplicityArgs=(--encrypt-key="$cfgBackupGpgKey" --sign-key="$cfgBackupGpgKey")
else
	duplicityArgs=(--no-encryption)
fi

# Amazon S3 specific configuration
if [[ -n $cfgBackupS3SecretKey ]]; then
	export AWS_ACCESS_KEY_ID=$cfgBackupS3Key \
		   AWS_SECRET_ACCESS_KEY=$cfgBackupS3SecretKey

	if [[ $cfgBackupS3European = true ]]; then
		duplicityArgs+=(--s3-use-new-style --s3-european-buckets)
	elif [[ $cfgBackupS3NewStyle = true ]]; then
		duplicityArgs+=(--s3-use-new-style)
	fi
fi

duplicityArgs+=("${cfgBackupDuplicityArgs[@]}")

# Function to backup a source path ($1) using the provided realm ($2). Realms
# help separate the different things that get backed up, such as domains,
# emails etc which suffix the "cfgBackupDest" var, e.g. $cfgBackupDest/<realm>/
#
# An optional third argument can be passed which specifies the destination
# subpath ($3), allowing you to organize the destination paths better. If empty
# then the source path ($1) will be used.
duplicityBackupPath()
{
	if [[ ! -e $1 ]]; then
		echo "Source path '$1' does not exist" >&2
		return 2
	fi

	local configArgs=$duplicityArgs
	if [[ $2 = mysql ]]; then
		# Allow source mismatch because the MySQL database dumps are done in a
		# temporary directory that changes on each run.
		configArgs+=(--allow-source-mismatch)
	fi

	duplicity \
		--verbosity warning \
		--no-print-statistics \
		--full-if-older-than 1M \
		--volsize 100 \
		"${configArgs[@]}" \
		"$1" \
		"$cfgBackupDest/$2/${3:-$1}"

	if (( $? > 0 )); then
		echo "Failed to backup '$1'" >&2
		return 2
	else
		echo "Successfully backed up '$1'"

		duplicity \
			remove-older-than "${cfgBackupTtl:-6M}" \
			--verbosity warning \
			--force \
			"${configArgs[@]}" \
			"$cfgBackupDest/$2/${3:-$1}"

		if (( $? > 0 )); then
			echo "Failed to remove older files in '$2/$1'" >&2
			return 2
		else
			return 0
		fi
	fi
}

##
## Backup everything we've been told to do
##

# cron
if [[ $backupCron = true ]]; then
	duplicityBackupPath /var/spool/cron cron || exitCode=2
fi

# Domain document roots
if [[ $backupDomains = true ]]; then
	for credentialsFile in "$cfgVarStateDir"/domains/*; do
		domainPath=$(awk '/^path =/{print $3}' "$credentialsFile")

		if [[ -z $domainPath || ! -d $domainPath ]]; then
			echo "Malformed or nonexistent 'path' value in '$credentialsFile'" >&2
			exitCode=2
		elif ! duplicityBackupPath "$domainPath" domains; then
			exitCode=2
		fi
	done
fi

# Virtual email addresses
if [[ $backupEmails = true ]]; then
	duplicityBackupPath /var/mail/virtual emails || exitCode=2
fi

# Domain MySQL databases and the special "mysql" database
if [[ $backupMysql = true ]]; then
	tmpDir=$(mktemp -d --tmpdir ozsrvutils-mysql.XXX)

	# First backup the "mysql" database
	tmpFile=$tmpDir/mysql.sql.gz
	(umask 177 && touch "$tmpFile")

	mysqldump \
		--host="$cfgMysqlHost" \
		--user="$cfgMysqlUser" \
		--password="$cfgMysqlPass" \
		--lock-tables \
		--skip-extended-insert \
		mysql | gzip > "$tmpFile"

	duplicityBackupPath "$tmpFile" mysql mysql

	# Backup all databases for all domains that have been created
	for credentialsFile in "$cfgVarStateDir"/domains/*; do
		dbUser=$(awk '/^mysql_username =/{print $3}' "$credentialsFile")
		dbPass=$(awk '/^mysql_password =/{print $3}' "$credentialsFile")
		dbName=$(awk '/^mysql_database =/{print $3}' "$credentialsFile")

		if [[ -n $dbUser && -n $dbPass && -n $dbName ]]; then
			tmpFile=$tmpDir/$dbName.sql.gz
			(umask 177 && touch "$tmpFile")

			mysqldump \
				--host="$cfgMysqlHost" \
				--user="$dbUser" \
				--password="$dbPass" \
				--lock-tables \
				--skip-extended-insert \
				"$dbName" | gzip > "$tmpFile"

			duplicityBackupPath "$tmpFile" mysql "$dbName"
			unlink "$tmpFile"
		fi
	done

	rm -rf "$tmpDir"
fi

unset PASSPHRASE AWS_ACCESS_KEY AWS_SECRET_ACCESS_KEY

exit ${exitCode:-0}