#!/bin/bash

###
# OpenZula server utilities
# --- Handles adding, deleting and passwords for email addresses
#
# Copyright (c) 2011 Alex Cartwright <alex@openzula.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name(s) of the above
# copyright holders shall not be used in advertising or otherwise
# to promote the sale, use or other dealings in this Software without
# prior written authorization.
###

for dependency in postfix postmap dovecotpw; do
	if ! type "$dependency" &> /dev/null; then
		echo "'$dependency' was not found or does not exist" >&2
		exit 2
	fi
done

case $2 in
	--add|--chpasswd|--delete)
		action=${2:2}
		;;
	-h)
		echo "OpenZula server utilities"
		echo "Usage:"
		echo -e "\t$scriptName email --add -a foo@example.org"
		echo -e "\t$scriptName email --delete -a foo@example.org"
		echo -e "\t$scriptName email --chpasswd -a foo@example.org -p password\n"
		echo "Report bugs to <alex@openzula.org>"
		exit 0
		;;
	*)
		echo "Invalid action '$2'. Use '--add', '--chpasswd' or '--delete'" >&2
		exit 1
		;;
esac

shift 2
while getopts ":a:p:h" OPTION
do
	case $OPTION in
		a)
			optEmail=$OPTARG
			;;
		p)
			optPwd=$OPTARG
			;;
		h)
			echo "OpenZula server utilities"
			echo "Usage:"
			if [[ $action = add ]]; then
				echo -e "\t$scriptName email --add -a foo@example.org\n"
			elif [[ $action = delete ]]; then
				echo -e "\t$scriptName email --delete -a foo@example.org\n"
			elif [[ $action = chpasswd ]]; then
				echo -e "\t$scriptName email --chpasswd -a foo@example.org -p password\n"
			fi
			echo "Options:"
			echo -e "\t-a\tEmail address\n"
			echo "Report bugs to <alex@openzula.org>"
			exit 0
			;;
		*)
			echo "Invalid argument (or value of) '-$OPTARG'. See '-h' for help text." >&2
			exit 1
			;;
	esac
done

if [[ -z $optEmail ]]; then
	echo "Invalid arguments; expecting at least '-a'. See -'h' for help text." >&2
	exit 1
fi

if [[ ! -d $cfgVarStateDir/emails ]]; then
	mkdir "$cfgVarStateDir/emails"
fi

# Get the different parts of the email (domain and user)
partUser=$(echo -n "$optEmail" | cut -d@ -f1)
partDomain=$(echo -n "$optEmail" | cut -d@ -f2)

if [[ $partUser = $partDomain || -z $partUser || -z $partDomain ]]; then
	echo "Please provide a valid email address." >&2
	exit 2
fi

case $action in
	add)
		##
		## Handle the 'add 'action
		##
		if grep -Fq "$optEmail" /etc/postfix/virtual/mb-maps; then
			echo "Email address already exists." >&2
			exit 2
		fi

		## Let postfix know it's the final destination for this domain
		if ! grep -Fxq "$partDomain" /etc/postfix/virtual/mb-domains; then
			echo "$partDomain" >> /etc/postfix/virtual/mb-domains
			if (( $? == 1 )); then
				echo "Failed to add domain to /etc/postfix/virtual/mb-domains" >&2
				exit 2
			fi
		fi

		## Add the map in for this email address, grouping all emails together
		lastEntryLn=$(grep -n -m1 "@$partDomain" /etc/postfix/virtual/mb-maps | cut -d: -f1)
		if [[ -z $lastEntryLn ]]; then
			echo -e "\n## $partDomain\n$optEmail\t\t\t$partDomain/$partUser/" >> /etc/postfix/virtual/mb-maps
		else
			sed -i "${lastEntryLn}a$optEmail\t\t\t$partDomain/$partUser/" /etc/postfix/virtual/mb-maps
		fi

		## Add in the username/password entry
		password=$(apg -d -n1 -m10 -x14 -M LCNS)
		echo "$optEmail":"$(dovecotpw -s SSHA -p $password)" >> /etc/dovecot/passwd

		maildirmake.dovecot "/var/mail/virtual/$partDomain/$partUser" vmail
		chown -R vmail:vmail "/var/mail/virtual/$partDomain"

		postmap /etc/postfix/virtual/mb-maps
		postfix reload 2> /dev/null

		## Run any additional files needed
		export OZ_EMAIL=$optEmail
		for postFile in "$configPath"/post-email-add.d/*; do
			if [[ -x $postFile ]]; then
				(cd "$configPath/post-email-add.d" && ./$(basename "$postFile"))
			fi
		done

		## All done!
		credentialsFile=$cfgVarStateDir/emails/$optEmail
		touch "$credentialsFile"
		chown root:adm "$credentialsFile"
		chmod 0640 "$credentialsFile"

		echo -e "address = $optEmail\n" \
				"username = $optEmail\n" \
				"password = $password\n" \
				"server = $(cat /etc/mailname)" > "$credentialsFile"
		sed -i -e "s#^ ##g" "$credentialsFile"

		## Display the newly created file to the user
		echo -e "New email address created:\n"
		cat "$credentialsFile" | sed -e "s#^#\t#g"
		;;

	delete)
		##
		## Handle the 'delete' action
		##
		if ! grep -Fq "$optEmail" /etc/postfix/virtual/mb-maps; then
			echo "Email address does not exist" >&2
			exit 2
		fi

		sed -i "/^$optEmail/d" /etc/postfix/virtual/mb-maps /etc/dovecot/passwd
		rm -rf "/var/mail/virtual/$partDomain/$partUser"

		## See if there are any more emails addresses for this domain
		if ! grep -Fq "@$partDomain" /etc/postfix/virtual/mb-maps; then
			sed -i "/^## $partDomain/d" /etc/postfix/virtual/mb-maps
			sed -i "/^$partDomain/d" /etc/postfix/virtual/mb-domains
			rm -rf "/var/mail/virtual/$partDomain"
		fi

		## Run any additional files needed
		export OZ_EMAIL=$optEmail
		for postFile in "$configPath"/post-email-delete.d/*; do
			if [[ -x $postFile ]]; then
				(cd "$configPath/post-email-delete.d" && ./$(basename "$postFile"))
			fi
		done

		unlink "$cfgVarStateDir/emails/$optEmail" 2> /dev/null
		postmap /etc/postfix/virtual/mb-maps
		postfix reload 2> /dev/null

		echo "Deleted email address '$optEmail'"
		;;

	chpasswd)
		##
		## Handle the 'chpasswd' action
		##
		credentialsFile=$cfgVarStateDir/emails/$optEmail
		if [[ ! -f $credentialsFile ]]; then
			echo "Unable to find '$credentialsFile'" >&2
			exit 2
		elif ! grep -q "^$optEmail:" /etc/dovecot/passwd; then
			echo "No login exists for this email address" >&2
			exit 2
		elif (( ${#optPwd} < 6 )); then
			echo "Password must be >= 6 characters long" >&2
			exit 2
		fi

		sed -i "/^$optEmail:/d" /etc/dovecot/passwd
		echo "$optEmail":"$(dovecotpw -s SSHA -p $optPwd)" >> /etc/dovecot/passwd

		sed -i "s/^password = .*/password = $optPwd/" "$credentialsFile"

		## Run any additional files needed
		export OZ_EMAIL=$optEmail
		for postFile in "$configPath"/post-email-chpasswd.d/*; do
			if [[ -x $postFile ]]; then
				(cd "$configPath/post-email-chpasswd.d" && ./$(basename "$postFile"))
			fi
		done

		echo "Updated email password"
		;;
esac

exit 0