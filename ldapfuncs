#!/bin/bash

###
# OpenZula server utilities
# --- Provides common functions for LDAP manipulation
#
# Copyright (c) 2011 Alex Cartwright <alex@openzula.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name(s) of the above
# copyright holders shall not be used in advertising or otherwise
# to promote the sale, use or other dealings in this Software without
# prior written authorization.
###

if (( $(which ldapsearch ldapadd ldapmodify ldapdelete &> /dev/null; echo -n $?) > 0 )); then
	echo "One or more of the following commands can not be found: ldapsearch ldapadd ldapmodify ldapdelete" >&2
	exit 2
fi

## Setup the common arguments used for connecting
ldapCommonArgs=(-H"$cfgLdapUri" -x -D"$cfgLdapBindDn" -y"$cfgLdapBindDnPwdFile")

##
## Get the next usable group or user ID (UID/GID). If no $1 argument is provided
## then it will assume 'user'.
##
## $1	user|group
##
ozldap-nextid()
{
	if [[ -z $1 || $1 = user ]]; then
		local attr=uidNumber
		local ocSearchVal=posixAccount
		local minId=$cfgLdapFirstUid
	else
		local attr=gidNumber
		local ocSearchVal=posixGroup
		local minId=$cfgLdapFirstGid
	fi

	local results=$(ldapsearch "${ldapCommonArgs[@]}" -LLL -S $attr -b "$cfgLdapSuffix" "(objectClass=$ocSearchVal)" $attr)
	if (( $? > 0 )); then
		echo "ozldap-nextid: failed to ldapsearch" >&2
		return 2
	fi

	local id=$(echo -n "$results" | awk "/^$attr:/{print \$2}" | tail -n1)
	if [[ -z $id || $id -lt $minId ]]; then
		echo "$minId"
	else
		echo "$(($id+1))"
	fi
	return 0
}

##
## Adds a new group
##
## $1	name
##
ozldap-addgroup()
{
	if [[ -z $1 ]]; then
		echo "ozldap-addgroup: missing group name" >&2
		return 2
	elif (( $(getent group "$1" > /dev/null; echo -n $?) == 0 )); then
		echo "ozldap-addgroup: group already exists" >&2
		return 2
	fi

	local group=$1
	local gid=$(ozldap-nextid group)
	if (( $? > 0 )); then
		return 2
	fi

	## Attempt to add the new group using the template ldif file
	sed -e "s/{SUFFIX}/$cfgLdapSuffix/g" \
		-e "s/{G_SUFFIX}/$cfgLdapGroupSuffix/g" \
		-e "s/{GROUP}/$group/g" \
		-e "s/{GID}/$gid/g" \
		"$configPath/ldapgroup.ldif" | ldapadd "${ldapCommonArgs[@]}" > /dev/null

	if (( $? > 0 )); then
		echo "ozldap-addgroup: failed to ldapadd" >&2
		return 2
	else
		return 0
	fi
}

##
## Adds a new user
##
## $1	name
## $2	plain-text password
## $3	home directory
##
ozldap-adduser()
{
	if [[ -z $1 || -z $2 ]]; then
		echo "ozldap-adduser: missing username and/or password" >&2
		return 2
	elif (( $(getent passwd "$1" > /dev/null; echo -n $?) == 0 )); then
		echo "ozldap-adduser: user already exists" >&2
		return 2
	fi

	local user=$1
	local pass=$2
	local uid=$(ozldap-nextid user)
	local usersHomeDir=${3:-$cfgUsersHomeDir/$user}

	## Add the new group of the same name
	ozldap-addgroup "$user"
	if (( $? > 0 )); then
		echo "ozldap-adduser: failed to add user group" >&2
		return 2
	fi
	local gid=$(getent group "$user" | cut -d: -f3)
	if [[ -z $gid ]]; then
		gid=$(getent group "users" | cut -d: -f3)
	fi

	## Attempt to add the new user using the template ldif file
	sed -e "s/{SUFFIX}/$cfgLdapSuffix/g" \
		-e "s/{U_SUFFIX}/$cfgLdapUserSuffix/g" \
		-e "s/{USER}/$user/g" \
		-e "s/{UID}/$uid/g" \
		-e "s/{GID}/$gid/g" \
		-e "s|{HOME}|$usersHomeDir|g" \
		-e "s|{SHELL}|$cfgUsersShell|g" \
		"$configPath/ldapuser.ldif" | ldapadd "${ldapCommonArgs[@]}" > /dev/null

	if (( $? > 0 )); then
		echo "ozldap-adduser: failed to ldapadd" >&2
		return 2
	fi

	## Set the users password
	local tmpPwdFile=$(mktemp)
	echo -n "$pass" > "$tmpPwdFile"
	ldappasswd "${ldapCommonArgs[@]}" -T "$tmpPwdFile" "uid=$user,$cfgLdapUserSuffix,$cfgLdapSuffix"
	unlink "$tmpPwdFile"

	## Setup the users home directory with correct permissions
	if [[ -d $usersHomeDir ]]; then
		echo "ozldap-adduser: home directory already exists"
	else
		cp -a "${SKEL:-/etc/skel}" "$usersHomeDir"
		chmod "$cfgUsersHomeDirMode" "$usersHomeDir"
		chown -R "$user":"$user" "$usersHomeDir"
	fi

	ozldap-addusertogroup "$user" "$user"

	return 0
}

##
## Adds an existing user to an existing LDAP group
##
## $1	user
## $2	group
##
ozldap-addusertogroup()
{
	if [[ -z $1 || -z $2 ]]; then
		echo "ozldap-addusertogroup: missing username and/or group" >&2
		return 2
	elif (( $(getent passwd "$1" > /dev/null; echo -n $?) > 0 )); then
		echo "ozldap-addusertogroup: user does not exist" >&2
		return 2
	elif (( $(getent -s ldap group "$2" > /dev/null; echo -n $?) > 0 )); then
		echo "ozldap-addusertogroup: group does not exist" >&2
		return 2
	fi

	local user=$1
	local group=$2

	## Modify the LDIF entry for the correct group
	echo "dn: cn=$group,$cfgLdapGroupSuffix,$cfgLdapSuffix
changetype: modify
add: memberUid
memberUid: $user" | ldapmodify "${ldapCommonArgs[@]}" > /dev/null

	if (( $? == 0 || $? == 20 )); then
		return 0
	else
		echo "ozldap-addusertogroup: failed to ldapmodify" >&2
		return 2
	fi
}